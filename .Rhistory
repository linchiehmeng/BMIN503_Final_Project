geom_bar(stat = "identity", position = "fill") +
labs(title = paste("Proportion of", var, "by sarcopenia"), x = "Sarcopenia", y = "Proportion", fill = var) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::percent_format())
print(p)
}
# Create a violin plot for BMI with an overlay of box plot to show density and summary stats
ggplot(final_data, aes(x = as.factor(sarcopenia), y = BMI, fill = as.factor(sarcopenia))) +
geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.1, position = position_dodge(0.9), outlier.shape = NA) +
labs(title = "Distribution of BMI by Sarcopenia", x = "Sarcopenia", y = "BMI") +
theme_minimal()
sarcopenia status
#Create plots to show the characteristics stratified by statins use status
# Define a vector of variable names
categorical_vars <- c("gender", "age_group", "race", "income", "education_n", "marital_n","physical_n", "alcohol_n", "smoking_n", "diet_n", "health_n","walk_dis_n", "HTN_n", "lipid_n", "cardio_n", "diabetes_n", "CKD_n")
# Create bar plots showing proportions for each categorical variable by statin use
for (var in categorical_vars) {
p <- final_data %>%
group_by(statin_use, .data[[var]]) %>%
summarise(count = n(), .groups = "drop") %>%
mutate(proportion = count / sum(count)) %>%
ggplot(aes_string(x = "statin_use", y = "proportion", fill = var)) +
geom_bar(stat = "identity", position = "fill") +
labs(title = paste("Proportion of", var, "by Statin Use"), x = "Statin Use", y = "Proportion", fill = var) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::percent_format())
print(p)
}
# Create a violin plot for BMI with an overlay of box plot to show density and summary stats
ggplot(final_data, aes(x = statin_use, y = BMI, fill = statin_use)) +
geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.1, position = position_dodge(0.9), outlier.shape = NA) +
labs(title = "Distribution of BMI by Statin Use", x = "Statin Use", y = "BMI") +
theme_minimal()
# Create table and plots to show the characteristics stratified by sarcopenia status
vars <- c("gender", "age_group", "BMI",  "race", "income", "education_n", "marital_n","physical_n",  "alcohol_n",  "smoking_n", "diet_n", "health_n", "walk_dis_n", "HTN_n", "lipid_n", "cardio_n", "diabetes_n",  "CKD_n", "statin_use")
factorVars <- setdiff(vars, "BMI")
table1 <- CreateTableOne(vars = vars, strata = "sarcopenia", data = final_data, factorVars = factorVars, test = FALSE)
table1_df <- as.data.frame(print(table1, quote = FALSE, noSpaces = TRUE))
# Create bar plots showing proportions for each categorical variable by statin use
categorical_vars <- c("gender", "age_group", "race", "income", "education_n", "marital_n","physical_n", "alcohol_n", "smoking_n", "diet_n", "health_n","walk_dis_n", "HTN_n", "lipid_n", "cardio_n", "diabetes_n", "CKD_n", "statin_use")
for (var in categorical_vars) {
p <- final_data %>%
group_by(sarcopenia, .data[[var]]) %>%
summarise(count = n(), .groups = "drop") %>%
mutate(proportion = count / sum(count)) %>%
ggplot(aes_string(x = "sarcopenia", y = "proportion", fill = var)) +
geom_bar(stat = "identity", position = "fill") +
labs(title = paste("Proportion of", var, "by sarcopenia"), x = "Sarcopenia", y = "Proportion", fill = var) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::percent_format())
print(p)
}
# Create a violin plot for BMI with an overlay of box plot to show density and summary stats
ggplot(final_data, aes(x = as.factor(sarcopenia), y = BMI, fill = as.factor(sarcopenia))) +
geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.1, position = position_dodge(0.9), outlier.shape = NA) +
labs(title = "Distribution of BMI by Sarcopenia", x = "Sarcopenia", y = "BMI") +
theme_minimal()
View(final_data)
model <- svyglm(sarcopenia ~ statin_use, design = survey_design, family = quasibinomial())
summary(model)
model <- svyglm(sarcopenia ~ statin_use, design = survey_design, family = quasibinomial())
coefficients <- coef(model)
odds_ratios <- exp(coefficients)
summary(model)
odds_ratios
#Building logistic regressoin models
model <- svyglm(sarcopenia ~ statin_use, design = survey_design, family = quasibinomial())
coefficients <- coef(model)
odds_ratios <- exp(coefficients)
summary(model)
odds_ratios
#Building logistic regressoin models
model <- svyglm(sarcopenia ~ statin_use, design = survey_design, family = quasibinomial())
odds_ratios_with_ci <- exp(cbind(OR = coef(model), confint(model)))
summary(model)
odds_ratios_with_ci
#Building adjusted logistic regressoin models considering examine weight of NHANES
adjustment_vars <- setdiff(names(final_data), c("sarcopenia", "statin_use"))
adjustment_vars <- setdiff(names(final_data), c("sarcopenia", "statin_use"))
formula <- as.formula(paste("sarcopenia ~ statin_use +", paste(adjustment_vars, collapse = " + ")))
model2 <- svyglm(formula, design = survey_design, family = quasibinomial())
odds_ratios_with_ci2 <- exp(cbind(OR = coef(model), confint(model)))
summary(model2)
odds_ratios_with_ci2
odds_ratios_with_ci2 <- exp(cbind(OR = coef(model2), confint(model)))
odds_ratios_with_ci2 <- exp(cbind(OR = coef(model2), confint(model)))
odds_ratios_with_ci2
odds_ratios_with_ci2 <- exp(cbind(OR = coef(model2), confint(model2)))
odds_ratios_with_ci2
#Building logistic regressoin model considering examine weight of NHANES
model <- svyglm(sarcopenia ~ statin_use, design = survey_design, family = quasibinomial())
odds_ratios_with_ci <- exp(cbind(OR = coef(model), confint(model)))
summary(model)
odds_ratios_with_ci
#Building adjusted logistic regressoin models considering examine weight of NHANES
adjustment_vars <- setdiff(names(final_data), c("sarcopenia", "statin_use"))
formula <- as.formula(paste("sarcopenia ~ statin_use +", paste(adjustment_vars, collapse = " + ")))
model2 <- svyglm(formula, design = survey_design, family = quasibinomial())
odds_ratios_with_ci2 <- exp(cbind(OR = coef(model2), confint(model2)))
summary(model2)
odds_ratios_with_ci2
library(forestplot)
install.packages("forestplot")
library(forestplot)
unadjusted_data <- data.frame(
Variable = rownames(odds_ratios_with_ci),
OR = odds_ratios_with_ci[, "OR"],
CI_low = odds_ratios_with_ci[, "2.5 %"],
CI_high = odds_ratios_with_ci[, "97.5 %"]
)
forestplot(
labeltext = unadjusted_data$Variable,
mean = unadjusted_data$OR,
lower = unadjusted_data$CI_low,
upper = unadjusted_data$CI_high,
zero = 1,
title = "Unadjusted Model - Forest Plot",
xlab = "Odds Ratio (95% CI)",
boxsize = 0.2
)
forestplot(
labeltext = unadjusted_data$Variable,
mean = unadjusted_data$OR,
lower = unadjusted_data$CI_low,
upper = unadjusted_data$CI_high,
zero = 1,
title = "Unadjusted Model - Forest Plot",
xlab = "Odds Ratio (95% CI)",
boxsize = 0.01
)
forestplot(
labeltext = unadjusted_data$Variable,
mean = unadjusted_data$OR,
lower = unadjusted_data$CI_low,
upper = unadjusted_data$CI_high,
zero = 1,
title = "Unadjusted Model - Forest Plot",
xlab = "Odds Ratio (95% CI)",
boxsize = 0.05
)
#Forest plot
unadjusted_data <- data.frame(
Variable = rownames(odds_ratios_with_ci),
OR = odds_ratios_with_ci[, "OR"],
CI_low = odds_ratios_with_ci[, "2.5 %"],
CI_high = odds_ratios_with_ci[, "97.5 %"]
) %>%
filter(Variable != "(Intercept)")
forestplot(
labeltext = unadjusted_data$Variable,
mean = unadjusted_data$OR,
lower = unadjusted_data$CI_low,
upper = unadjusted_data$CI_high,
zero = 1,
title = "Unadjusted Model - Forest Plot",
xlab = "Odds Ratio (95% CI)",
boxsize = 0.1
)
forestplot(
labeltext = unadjusted_data$Variable,
mean = unadjusted_data$OR,
lower = unadjusted_data$CI_low,
upper = unadjusted_data$CI_high,
zero = 1,
title = "Unadjusted Model - Forest Plot",
xlab = "Odds Ratio (95% CI)",
boxsize = 0.05
)
adjusted_data <- data.frame(
Variable = rownames(odds_ratios_with_ci2),
OR = odds_ratios_with_ci2[, "OR"],
CI_low = odds_ratios_with_ci2[, "2.5 %"],
CI_high = odds_ratios_with_ci2[, "97.5 %"]
) %>%
filter(Variable != "(Intercept)")
forestplot(
labeltext = adjusted_data$Variable,
mean = adjusted_data$OR,
lower = adjusted_data$CI_low,
upper = adjusted_data$CI_high,
zero = 1,
title = "Adjusted Model - Forest Plot",
xlab = "Odds Ratio (95% CI)",
boxsize = 0.05
)
forestplot(
labeltext = adjusted_data$Variable,
mean = adjusted_data$OR,
lower = adjusted_data$CI_low,
upper = adjusted_data$CI_high,
zero = 1,
title = "Adjusted Model - Forest Plot",
xlab = "Odds Ratio (95% CI)",
boxsize = 0.05,
txt_gp = fpTxtGp(label = gpar(fontsize = 8))
)
forestplot(
labeltext = adjusted_data$Variable,
mean = adjusted_data$OR,
lower = adjusted_data$CI_low,
upper = adjusted_data$CI_high,
zero = 1,
title = "Adjusted Model - Forest Plot",
xlab = "Odds Ratio (95% CI)",
boxsize = 0.05,
txt_gp = fpTxtGp(label = gpar(fontsize = 6))
)
#Building adjusted logistic regressoin models considering examine weight of NHANES
adjustment_vars <- setdiff(names(final_data), c("sarcopenia", "statin_use", "id"))
formula <- as.formula(paste("sarcopenia ~ statin_use +", paste(adjustment_vars, collapse = " + ")))
model2 <- svyglm(formula, design = survey_design, family = quasibinomial())
odds_ratios_with_ci2 <- exp(cbind(OR = coef(model2), confint(model2)))
summary(model2)
odds_ratios_with_ci2
#Forest plot
adjusted_data <- data.frame(
Variable = rownames(odds_ratios_with_ci2),
OR = odds_ratios_with_ci2[, "OR"],
CI_low = odds_ratios_with_ci2[, "2.5 %"],
CI_high = odds_ratios_with_ci2[, "97.5 %"]
) %>%
filter(Variable != "(Intercept)")
forestplot(
labeltext = adjusted_data$Variable,
mean = adjusted_data$OR,
lower = adjusted_data$CI_low,
upper = adjusted_data$CI_high,
zero = 1,
title = "Adjusted Model - Forest Plot",
xlab = "Odds Ratio (95% CI)",
boxsize = 0.05,
txt_gp = fpTxtGp(label = gpar(fontsize = 6))
)
#Building adjusted logistic regressoin models considering examine weight of NHANES
adjustment_vars <- setdiff(names(final_data), c("sarcopenia", "statin_use", "id", "examine_weight"))
formula <- as.formula(paste("sarcopenia ~ statin_use +", paste(adjustment_vars, collapse = " + ")))
model2 <- svyglm(formula, design = survey_design, family = quasibinomial())
odds_ratios_with_ci2 <- exp(cbind(OR = coef(model2), confint(model2)))
summary(model2)
odds_ratios_with_ci2
#Forest plot
adjusted_data <- data.frame(
Variable = rownames(odds_ratios_with_ci2),
OR = odds_ratios_with_ci2[, "OR"],
CI_low = odds_ratios_with_ci2[, "2.5 %"],
CI_high = odds_ratios_with_ci2[, "97.5 %"]
) %>%
filter(Variable != "(Intercept)")
forestplot(
labeltext = adjusted_data$Variable,
mean = adjusted_data$OR,
lower = adjusted_data$CI_low,
upper = adjusted_data$CI_high,
zero = 1,
title = "Adjusted Model - Forest Plot",
xlab = "Odds Ratio (95% CI)",
boxsize = 0.05,
txt_gp = fpTxtGp(label = gpar(fontsize = 6))
)
#Building adjusted logistic regressoin models considering examine weight of NHANES
adjustment_vars <- setdiff(names(final_data), c("sarcopenia", "statin_use", "id", "exam_weight"))
formula <- as.formula(paste("sarcopenia ~ statin_use +", paste(adjustment_vars, collapse = " + ")))
model2 <- svyglm(formula, design = survey_design, family = quasibinomial())
odds_ratios_with_ci2 <- exp(cbind(OR = coef(model2), confint(model2)))
summary(model2)
odds_ratios_with_ci2
#Forest plot
adjusted_data <- data.frame(
Variable = rownames(odds_ratios_with_ci2),
OR = odds_ratios_with_ci2[, "OR"],
CI_low = odds_ratios_with_ci2[, "2.5 %"],
CI_high = odds_ratios_with_ci2[, "97.5 %"]
) %>%
filter(Variable != "(Intercept)")
forestplot(
labeltext = adjusted_data$Variable,
mean = adjusted_data$OR,
lower = adjusted_data$CI_low,
upper = adjusted_data$CI_high,
zero = 1,
title = "Adjusted Model - Forest Plot",
xlab = "Odds Ratio (95% CI)",
boxsize = 0.05,
txt_gp = fpTxtGp(label = gpar(fontsize = 6))
)
forestplot(
labeltext = unadjusted_data$Variable,
mean = unadjusted_data$OR,
lower = unadjusted_data$CI_low,
upper = unadjusted_data$CI_high,
zero = 1,
title = "Unadjusted Model - Forest Plot",
xlab = "Odds Ratio (95% CI)",
boxsize = 0.05,
txt_gp = fpTxtGp(label = gpar(fontsize = 6))
)
#Building logistic regressoin model considering examine weight of NHANES
model <- svyglm(sarcopenia ~ statin_use, design = survey_design, family = quasibinomial())
odds_ratios_with_ci <- exp(cbind(OR = coef(model), confint(model)))
summary(model)
odds_ratios_with_ci
#Forest plot
unadjusted_data <- data.frame(
Variable = rownames(odds_ratios_with_ci),
OR = odds_ratios_with_ci[, "OR"],
CI_low = odds_ratios_with_ci[, "2.5 %"],
CI_high = odds_ratios_with_ci[, "97.5 %"]
) %>%
filter(Variable != "(Intercept)")
forestplot(
labeltext = unadjusted_data$Variable,
mean = unadjusted_data$OR,
lower = unadjusted_data$CI_low,
upper = unadjusted_data$CI_high,
zero = 1,
title = "Unadjusted Model - Forest Plot",
xlab = "Odds Ratio (95% CI)",
boxsize = 0.05,
txt_gp = fpTxtGp(label = gpar(fontsize = 6))
)
#Building adjusted logistic regressoin models considering examine weight of NHANES
adjustment_vars <- setdiff(names(final_data), c("sarcopenia", "statin_use", "id", "exam_weight"))
formula <- as.formula(paste("sarcopenia ~ statin_use +", paste(adjustment_vars, collapse = " + ")))
model2 <- svyglm(formula, design = survey_design, family = quasibinomial())
odds_ratios_with_ci2 <- exp(cbind(OR = coef(model2), confint(model2)))
summary(model2)
odds_ratios_with_ci2
#Forest plot
adjusted_data <- data.frame(
Variable = rownames(odds_ratios_with_ci2),
OR = odds_ratios_with_ci2[, "OR"],
CI_low = odds_ratios_with_ci2[, "2.5 %"],
CI_high = odds_ratios_with_ci2[, "97.5 %"]
) %>%
filter(Variable != "(Intercept)")
forestplot(
labeltext = adjusted_data$Variable,
mean = adjusted_data$OR,
lower = adjusted_data$CI_low,
upper = adjusted_data$CI_high,
zero = 1,
title = "Adjusted Model - Forest Plot",
xlab = "Odds Ratio (95% CI)",
boxsize = 0.05,
txt_gp = fpTxtGp(label = gpar(fontsize = 6))
)
#Building adjusted logistic regressoin models considering examine weight of NHANES
adjustment_vars <- setdiff(names(final_data), c("sarcopenia", "statin_use", "id", "exam_weight"))
formula <- as.formula(paste("sarcopenia ~ statin_use +", paste(adjustment_vars, collapse = " + ")))
model2 <- svyglm(formula, design = survey_design, family = quasibinomial())
odds_ratios_with_ci2 <- exp(cbind(OR = coef(model2), confint(model2)))
summary(model2)
odds_ratios_with_ci2
#Forest plot
adjusted_data <- data.frame(
Variable = rownames(odds_ratios_with_ci2),
OR = odds_ratios_with_ci2[, "OR"],
CI_low = odds_ratios_with_ci2[, "2.5 %"],
CI_high = odds_ratios_with_ci2[, "97.5 %"]
) %>%
filter(Variable != "(Intercept)")
forestplot(
labeltext = adjusted_data$Variable,
mean = adjusted_data$OR,
lower = adjusted_data$CI_low,
upper = adjusted_data$CI_high,
zero = 1,
title = "Adjusted Model - Forest Plot",
xlab = "Odds Ratio (95% CI)",
boxsize = 0.05,
txt_gp = fpTxtGp(label = gpar(fontsize = 6))
)
library(nhanesA)
library(haven)
library(dplyr)
library(purrr)
library(boot)
library(Hmisc)
library(tableone)
library(labelled)
library(ggplot2)
library(survey)
library(forestplot)
# Create table and plots to show the characteristics stratified by sarcopenia status
vars <- c("gender", "age_group", "BMI",  "race", "income", "education_n", "marital_n","physical_n",  "alcohol_n",  "smoking_n", "diet_n", "health_n", "walk_dis_n", "HTN_n", "lipid_n", "cardio_n", "diabetes_n",  "CKD_n", "statin_use")
factorVars <- setdiff(vars, "BMI")
table1 <- CreateTableOne(vars = vars, strata = "sarcopenia", data = final_data, factorVars = factorVars, test = FALSE)
table1_df <- as.data.frame(print(table1, quote = FALSE, noSpaces = TRUE))
# Create bar plots showing proportions for each categorical variable by statin use
categorical_vars <- c("gender", "age_group", "race", "income", "education_n", "marital_n","physical_n", "alcohol_n", "smoking_n", "diet_n", "health_n","walk_dis_n", "HTN_n", "lipid_n", "cardio_n", "diabetes_n", "CKD_n", "statin_use")
for (var in categorical_vars) {
p <- final_data %>%
group_by(sarcopenia, .data[[var]]) %>%
summarise(count = n(), .groups = "drop") %>%
mutate(proportion = count / sum(count)) %>%
ggplot(aes_string(x = "sarcopenia", y = "proportion", fill = var)) +
geom_bar(stat = "identity", position = "fill") +
labs(title = paste("Proportion of", var, "by sarcopenia"), x = "Sarcopenia", y = "Proportion", fill = var) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::percent_format())
print(p)
}
# Create a violin plot for BMI with an overlay of box plot to show density and summary stats
ggplot(final_data, aes(x = as.factor(sarcopenia), y = BMI, fill = as.factor(sarcopenia))) +
geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.1, position = position_dodge(0.9), outlier.shape = NA) +
labs(title = "Distribution of BMI by Sarcopenia", x = "Sarcopenia", y = "BMI") +
theme_minimal()
# Create weighted Table 1 to show the characteristics stratified by sarcopenia status
survey_design <- svydesign(ids = ~1, data = final_data, weights = ~exam_weight)
table1_weight <- svyCreateTableOne(
vars = vars,
strata = "sarcopenia",
data = survey_design,
factorVars = factorVars,
test = FALSE,
)
print(table1_weight, quote = FALSE, noSpaces = TRUE)
#Create plots to show the characteristics stratified by statins use status
# Define a vector of variable names
categorical_vars <- c("gender", "age_group", "race", "income", "education_n", "marital_n","physical_n", "alcohol_n", "smoking_n", "diet_n", "health_n","walk_dis_n", "HTN_n", "lipid_n", "cardio_n", "diabetes_n", "CKD_n")
# Create bar plots showing proportions for each categorical variable by statin use
for (var in categorical_vars) {
p <- final_data %>%
group_by(statin_use, .data[[var]]) %>%
summarise(count = n(), .groups = "drop") %>%
mutate(proportion = count / sum(count)) %>%
ggplot(aes_string(x = "statin_use", y = "proportion", fill = var)) +
geom_bar(stat = "identity", position = "fill") +
labs(title = paste("Proportion of", var, "by Statin Use"), x = "Statin Use", y = "Proportion", fill = var) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::percent_format())
print(p)
}
# Create a violin plot for BMI with an overlay of box plot to show density and summary stats
ggplot(final_data, aes(x = statin_use, y = BMI, fill = statin_use)) +
geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.1, position = position_dodge(0.9), outlier.shape = NA) +
labs(title = "Distribution of BMI by Statin Use", x = "Statin Use", y = "BMI") +
theme_minimal()
# Create weighted Table 2 to show the characteristics stratified by statins use status
table2_weight <- svyCreateTableOne(
vars = categorical_vars,
strata = "statin_use",
data = survey_design,
factorVars = factorVars,
test = FALSE,
)
print(table2_weight, quote = FALSE, noSpaces = TRUE)
# Create weighted Table 1 to show the characteristics stratified by sarcopenia status
survey_design <- svydesign(ids = ~1, data = final_data, weights = ~exam_weight)
table1_weight <- svyCreateTableOne(
vars = vars,
strata = "sarcopenia",
data = survey_design,
factorVars = factorVars,
test = FALSE,
)
print(table1_weight, quote = FALSE, noSpaces = TRUE)
#Building logistic regressoin model considering examine weight of NHANES
model <- svyglm(sarcopenia ~ statin_use, design = survey_design, family = quasibinomial())
odds_ratios_with_ci <- exp(cbind(OR = coef(model), confint(model)))
summary(model)
odds_ratios_with_ci
#Forest plot
unadjusted_data <- data.frame(
Variable = rownames(odds_ratios_with_ci),
OR = odds_ratios_with_ci[, "OR"],
CI_low = odds_ratios_with_ci[, "2.5 %"],
CI_high = odds_ratios_with_ci[, "97.5 %"]
) %>%
filter(Variable != "(Intercept)")
forestplot(
labeltext = unadjusted_data$Variable,
mean = unadjusted_data$OR,
lower = unadjusted_data$CI_low,
upper = unadjusted_data$CI_high,
zero = 1,
title = "Unadjusted Model - Forest Plot",
xlab = "Odds Ratio (95% CI)",
boxsize = 0.05,
txt_gp = fpTxtGp(label = gpar(fontsize = 6))
)
#Building adjusted logistic regressoin models considering examine weight of NHANES
adjustment_vars <- setdiff(names(final_data), c("sarcopenia", "statin_use", "id", "exam_weight"))
formula <- as.formula(paste("sarcopenia ~ statin_use +", paste(adjustment_vars, collapse = " + ")))
model2 <- svyglm(formula, design = survey_design, family = quasibinomial())
odds_ratios_with_ci2 <- exp(cbind(OR = coef(model2), confint(model2)))
summary(model2)
odds_ratios_with_ci2
#Forest plot
adjusted_data <- data.frame(
Variable = rownames(odds_ratios_with_ci2),
OR = odds_ratios_with_ci2[, "OR"],
CI_low = odds_ratios_with_ci2[, "2.5 %"],
CI_high = odds_ratios_with_ci2[, "97.5 %"]
) %>%
filter(Variable != "(Intercept)")
forestplot(
labeltext = adjusted_data$Variable,
mean = adjusted_data$OR,
lower = adjusted_data$CI_low,
upper = adjusted_data$CI_high,
zero = 1,
title = "Adjusted Model - Forest Plot",
xlab = "Odds Ratio (95% CI)",
boxsize = 0.05,
txt_gp = fpTxtGp(label = gpar(fontsize = 6))
)
